server:
  port: 8080

# Spring 配置
spring:
  datasource:
    url: jdbc:mysql://47.113.197.48:3306/jinlink_boot?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
    username: root
    password: sr2539195984
    driver-class-name: com.mysql.cj.jdbc.Driver
  data:
    redis:
      # Redis数据库索引（默认为0）
      database: 1
      # Redis服务器地址
      host: 47.113.197.48
      # Redis服务器连接端口
      port: 6379
      # Redis服务器连接密码（默认为空）
      password: sr2539195984
      # 连接超时时间
      timeout: 2s
      lettuce:
        pool:
          enabled: true
  quartz:
    # 任务存储类型
    job-store-type: jdbc
    # 关闭时等待任务完成
    wait-for-jobs-to-complete-on-shutdown: false
    # 是否覆盖已有的任务
    overwrite-existing-jobs: true
    # 是否自动启动计划程序
    auto-startup: true
    # 延迟启动
    startup-delay: 1s
    jdbc:
      # 数据库架构初始化模式（never：从不进行初始化；always：每次都清空数据库进行初始化；embedded：只初始化内存数据库（默认值））
      initialize-schema: never
    # 相关属性配置
    properties:
      org:
        quartz:
          scheduler:
            # 调度器实例名称
            instanceName: QuartzScheduler
            # 分布式节点ID自动生成
            instanceId: AUTO
          jobStore:
            class: org.springframework.scheduling.quartz.LocalDataSourceJobStore
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            # 表前缀
            tablePrefix: mon_qrtz_
            # 是否开启集群
            isClustered: false
            # 数据源别名（自定义）
            dataSource: quartz
            # 分布式节点有效性检查时间间隔（毫秒）
            clusterCheckinInterval: 10000
            useProperties: false
          # 线程池配置
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 10
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true

# Sa-Token 配置
sa-token:
  # token 名称（同时也是 cookie 名称）
  token-name: satoken
  # token 有效期（单位：秒） 默认30天，-1 代表永久有效
  timeout: 2592000
  # token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认-1 代表不限制，永不冻结
  active-timeout: -1
  # 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）
  is-concurrent: true
  # 在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）
  is-share: true
  # token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）
  token-style: uuid
  # 是否输出操作日志
  is-log: false
  # 是否开启打印模式
  is-print: false

# Knife4J 配置
springdoc:
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  api-docs:
    path: /v3/api-docs
  group-configs:
    - group: '系统管理'
      paths-to-match: '/**'
      packages-to-scan: com.jinlink.controller.system
    - group: '监控管理'
      paths-to-match: '/**'
      packages-to-scan: com.jinlink.controller.monitor
    - group: '文件管理'
      paths-to-match: '/**'
      packages-to-scan: com.jinlink.controller.file

# knife4j的增强配置,不需要增强可以不配
knife4j:
  enable: true
  setting:
    language: zh_cn
    enable-footer: false
    enable-footer-custom: true

# MybatisFlex的配置项
mybatis-flex:
  mapper-locations: classpath*:mapper/**/*.xml
  check-config-location: true
  global-config:
    print-banner: false
  type-handlers-package: com.jinlink.modules
logging:
  level:
    default: error

# 本地文件上传
file:
  domain: https://bluearchive.top
  path: D:/blueArchive/uploadPath
  prefix: /statics
